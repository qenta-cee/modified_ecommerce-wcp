<?php
/**
 * Shop System Plugins - Terms of Use
 *
 * The plugins offered are provided free of charge by Wirecard Central Eastern Europe GmbH
 * (abbreviated to Wirecard CEE) and are explicitly not part of the Wirecard CEE range of
 * products and services.
 *
 * They have been tested and approved for full functionality in the standard configuration
 * (status on delivery) of the corresponding shop system. They are under General Public
 * License Version 2 (GPLv2) and can be used, developed and passed on to third parties under
 * the same terms.
 *
 * However, Wirecard CEE does not provide any guarantee or accept any liability for any errors
 * occurring when used in an enhanced, customized shop system configuration.
 *
 * Operation in an enhanced, customized configuration is at your own risk and requires a
 * comprehensive test phase by the user of the plugin.
 *
 * Customers use the plugins at their own risk. Wirecard CEE does not guarantee their full
 * functionality neither does Wirecard CEE assume liability for any disadvantages related to
 * the use of the plugins. Additionally, Wirecard CEE does not guarantee the full functionality
 * for customized shop systems or installed plugins of other vendors of plugins within the same
 * shop system.
 *
 * Customers are responsible for testing the plugin's functionality before starting productive
 * operation.
 *
 * By installing the plugin into the shop system the customer agrees to these terms of use.
 * Please do not use the plugin if you do not agree to these terms of use!
 */


/**
 * Test class for WirecardCEE_Stdlib_ConsumerData.
 * Generated by PHPUnit on 2011-06-24 at 13:17:00.
 */
class WirecardCEE_Stdlib_ConsumerDataTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var WirecardCEE_Stdlib_ConsumerData
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new WirecardCEE_Stdlib_ConsumerData();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function testSetEmail()
    {
        $mail = 'test@mail.com';
        $this->object->setEmail($mail);
        $data = $this->object->getData();
        $this->assertArrayHasKey('consumerEmail', $data);
        $this->assertEquals($mail, $data['consumerEmail']);
    }

    public function testSetBirthDate()
    {
        $birthDate = new DateTime();
        $this->object->setBirthDate($birthDate);
        $data = $this->object->getData();
        $this->assertArrayHasKey('consumerBirthDate', $data);
        $this->assertEquals($birthDate->format('Y-m-d'), $data['consumerBirthDate']);
    }

    public function testSetTaxIdentificationNumber()
    {
        $taxIdentificationNumber = '1234';
        $this->object->setTaxIdentificationNumber($taxIdentificationNumber);
        $data = $this->object->getData();
        $this->assertArrayHasKey('consumerTaxIdentificationNumber', $data);
        $this->assertEquals($taxIdentificationNumber, $data['consumerTaxIdentificationNumber']);
    }

    public function testSetDriversLicenseNumber()
    {
        $driversLicenseNumber = '1234';
        $this->object->setDriversLicenseNumber($driversLicenseNumber);
        $data = $this->object->getData();
        $this->assertArrayHasKey('consumerDriversLicenseNumber', $data);
        $this->assertEquals($driversLicenseNumber, $data['consumerDriversLicenseNumber']);
    }

    public function testSetDriversLicenseCountry()
    {
        $driversLicenseCountry = 'at';
        $this->object->setDriversLicenseCountry($driversLicenseCountry);
        $data = $this->object->getData();
        $this->assertArrayHasKey('consumerDriversLicenseCountry', $data);
        $this->assertEquals($driversLicenseCountry, $data['consumerDriversLicenseCountry']);
    }

    public function testSetDriversLicenseState()
    {
        $driversLicenseState = 'none';
        $this->object->setDriversLicenseState($driversLicenseState);
        $data = $this->object->getData();
        $this->assertArrayHasKey('consumerDriversLicenseState', $data);
        $this->assertEquals($driversLicenseState, $data['consumerDriversLicenseState']);
    }

    public function testAddAddressInformation()
    {
        $firstname      = 'Kein';
        $lastname       = 'Name';
        $billingAddress = new WirecardCEE_Stdlib_ConsumerData_Address(WirecardCEE_Stdlib_ConsumerData_Address::TYPE_BILLING);
        $billingAddress->setFirstname($firstname);
        $billingAddress->setLastname($lastname);
        $this->object->addAddressInformation($billingAddress);
        $data = $this->object->getData();
        $this->assertArrayHasKey('consumerBillingFirstname', $data);
        $this->assertArrayHasKey('consumerBillingLastname', $data);
        $this->assertEquals($firstname, $data['consumerBillingFirstname']);
        $this->assertEquals($lastname, $data['consumerBillingLastname']);

    }

    public function testSetIpAddress()
    {
        $consumerIpAddress = '10.1.0.11';
        $this->object->setIpAddress($consumerIpAddress);
        $data = $this->object->getData();
        $this->assertArrayHasKey('consumerIpAddress', $data);
        $this->assertEquals($consumerIpAddress, $data['consumerIpAddress']);
    }

    public function testSetUserAgent()
    {
        $consumerUserAgent = 'testing';
        $this->object->setUserAgent($consumerUserAgent);
        $data = $this->object->getData();
        $this->assertArrayHasKey('consumerUserAgent', $data);
        $this->assertEquals($consumerUserAgent, $data['consumerUserAgent']);
    }

    public function testGetData()
    {
        $data = $this->object->getData();
        $this->assertInternalType('array', $data);
    }

}

?>
